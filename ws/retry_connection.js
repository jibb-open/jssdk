"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.RetryConnection=void 0,require("core-js/modules/es.weak-map.js"),require("core-js/modules/web.dom-collections.iterator.js");var _exceptions=require("../types/exceptions.js"),_index=require("../utils/logger/index.js"),_connection_base=require("./connection_base.js");function _classPrivateMethodInitSpec(a,b){_checkPrivateRedeclaration(a,b),b.add(a)}function _classPrivateFieldInitSpec(a,b,c){_checkPrivateRedeclaration(a,b),b.set(a,c)}function _checkPrivateRedeclaration(a,b){if(b.has(a))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldGet(b,c){return b.get(_assertClassBrand(b,c))}function _classPrivateFieldSet(b,c,a){return b.set(_assertClassBrand(b,c),a),a}function _assertClassBrand(a,b,c){if("function"==typeof a?a===b:a.has(b))return 3>arguments.length?b:c;throw new TypeError("Private element is not present on this object")}var _started=/*#__PURE__*/new WeakMap,_connectionTimer=/*#__PURE__*/new WeakMap,_resetCountersTimer=/*#__PURE__*/new WeakMap,_RetryConnection_brand=/*#__PURE__*/new WeakSet;class RetryConnection extends _connection_base.ConnectionBase{constructor(a){let b=1<arguments.length&&arguments[1]!==void 0?arguments[1]:{maxRetryCount:10,minRetryIntervalMs:500,maxRetryIntervalMs:32e3};super(a),_classPrivateMethodInitSpec(this,_RetryConnection_brand),_classPrivateFieldInitSpec(this,_started,void 0),_classPrivateFieldInitSpec(this,_connectionTimer,void 0),_classPrivateFieldInitSpec(this,_resetCountersTimer,void 0),this.maxRetryCount=b.maxRetryCount||10,this.minRetryIntervalMs=b.minRetryIntervalMs||500,this.maxRetryIntervalMs=b.maxRetryIntervalMs||32e3,_classPrivateFieldSet(_connectionTimer,this,null),_classPrivateFieldSet(_resetCountersTimer,this,null),_classPrivateFieldSet(_started,this,!1),_assertClassBrand(_RetryConnection_brand,this,_resetCounters).call(this)}start(){this.isStarted()||(_index.logger.info("".concat(this.name,": starting...")),_classPrivateFieldSet(_started,this,!0),_assertClassBrand(_RetryConnection_brand,this,_resetCounters).call(this),_assertClassBrand(_RetryConnection_brand,this,_reconnect).call(this),this.onStarted())}stop(){_index.logger.info("".concat(this.name,": stopping...")),_classPrivateFieldSet(_started,this,!1),this.disconnect(),this.onStopped()}isStarted(){return _classPrivateFieldGet(_started,this)}onDisconnected(){super.onDisconnected(),_assertClassBrand(_RetryConnection_brand,this,_reconnect).call(this)}onStarted(){}onStopped(){}onError(a){super.onError(a),(a instanceof _exceptions.TooManyConnectionsError||a instanceof _exceptions.PermissionDeniedError||a instanceof _exceptions.SessionTimeoutError)&&this.stop()}disconnect(){clearTimeout(_classPrivateFieldGet(_connectionTimer,this)),clearTimeout(_classPrivateFieldGet(_resetCountersTimer,this)),super.disconnect()}setCounters(){let a=0<arguments.length&&arguments[0]!==void 0?arguments[0]:{maxRetryCount:10,minRetryIntervalMs:500,maxRetryIntervalMs:32e3};this.maxRetryCount=a.maxRetryCount||10,this.minRetryIntervalMs=a.minRetryIntervalMs||500,this.maxRetryIntervalMs=a.maxRetryIntervalMs||32e3}}exports.RetryConnection=RetryConnection;function _reconnect(){if(this.isStarted()){if(this.retryCount>this.maxRetryCount)return void this.stop();let a=Math.max(this.nexRetryTime-Date.now(),0);0<a&&(_index.logger.debug(this),_index.logger.info("".concat(this.name,": retrying connection in ").concat(this.retryIntervalMs,"ms]"))),clearTimeout(_classPrivateFieldGet(_resetCountersTimer,this)),this.retryIntervalMs=Math.min(2*this.retryIntervalMs,this.maxRetryIntervalMs),++this.retryCount,this.nexRetryTime=Date.now()+this.retryIntervalMs,_classPrivateFieldSet(_connectionTimer,this,setTimeout(()=>{this.connect().catch(a=>{this.onError(a)})},a)),_classPrivateFieldSet(_resetCountersTimer,this,setTimeout(()=>{_assertClassBrand(_RetryConnection_brand,this,_resetCounters).call(this)},6e4))}}function _resetCounters(){this.retryCount=0,this.retryIntervalMs=this.minRetryIntervalMs,this.nexRetryTime=Date.now()}