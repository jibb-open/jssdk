"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.ConnectionStatus=exports.ConnectionBase=void 0,require("core-js/modules/es.promise.js"),require("core-js/modules/es.weak-map.js"),require("core-js/modules/web.dom-collections.iterator.js");var _index=require("../utils/logger/index.js"),_future=require("../utils/future.js"),_proto=require("../types/proto.js"),_exceptions=require("../types/exceptions.js");function _classPrivateFieldInitSpec(a,b,c){_checkPrivateRedeclaration(a,b),b.set(a,c)}function _checkPrivateRedeclaration(a,b){if(b.has(a))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldGet(b,c){return b.get(_assertClassBrand(b,c))}function _classPrivateFieldSet(b,c,a){return b.set(_assertClassBrand(b,c),a),a}function _assertClassBrand(a,b,c){if("function"==typeof a?a===b:a.has(b))return 3>arguments.length?b:c;throw new TypeError("Private element is not present on this object")}const ErrorCode=_proto.types.Code,ConnectionStatus=exports.ConnectionStatus={CONNECTED:"CONNECTED",DISCONNECTED:"DISCONNECTED",CONNECTING:"CONNECTING"};var _connectionStatus=/*#__PURE__*/new WeakMap,_connectionFuture=/*#__PURE__*/new WeakMap,_socket=/*#__PURE__*/new WeakMap;class ConnectionBase{constructor(a){_classPrivateFieldInitSpec(this,_connectionStatus,void 0),_classPrivateFieldInitSpec(this,_connectionFuture,void 0),_classPrivateFieldInitSpec(this,_socket,void 0),this.name=a,_classPrivateFieldSet(_connectionStatus,this,ConnectionStatus.DISCONNECTED),_classPrivateFieldSet(_connectionFuture,this,new _future.Future),_classPrivateFieldGet(_connectionFuture,this).reject("disconnected"),_classPrivateFieldSet(_socket,this,null)}async connect(){if(null==_classPrivateFieldGet(_socket,this)){_index.logger.info("".concat(this.name,": connecting ...")),_classPrivateFieldSet(_connectionStatus,this,ConnectionStatus.CONNECTING),_classPrivateFieldSet(_connectionFuture,this,new _future.Future);let a=await this.getURI();_classPrivateFieldSet(_socket,this,new WebSocket(a)),_classPrivateFieldGet(_socket,this).binaryType="arraybuffer",_classPrivateFieldGet(_socket,this).addEventListener("open",()=>{this.onConnected()}),_classPrivateFieldGet(_socket,this).addEventListener("close",()=>{this.onDisconnected()}),_classPrivateFieldGet(_socket,this).addEventListener("message",a=>{this.onData(a.data)}),_classPrivateFieldGet(_socket,this).addEventListener("error",a=>{this.onError(a)})}}async getURI(){throw new Error("connection.getURI is not implemented")}disconnect(){null!=_classPrivateFieldGet(_socket,this)&&(_classPrivateFieldGet(_socket,this).close(),_classPrivateFieldSet(_socket,this,null),_index.logger.info("connection disconnected: ",this.name))}async write(a){var b,c;await this.waitForConnection(),null===(b=_classPrivateFieldGet(_socket,this))||void 0===b||null===(c=b.send)||void 0===c||c.call(b,a)}parseJSONResponse(a){try{let{code:b,reason:c}=JSON.parse(a);return b===ErrorCode.ERR_TOO_MANY_CONNECTIONS?this.onError(new _exceptions.TooManyConnectionsError(c)):b===ErrorCode.ERR_UNAUTHORIZED?this.onError(new _exceptions.PermissionDeniedError(c)):b===ErrorCode.ERR_BAD_REQUEST?(this.stop(),this.onError(new _exceptions.InvalidArgumentError(c))):b===ErrorCode.ERR_TIMEOUT?this.onError(new _exceptions.SessionTimeoutError(c)):b===ErrorCode.ERR_INTERNAL?this.onError(new _exceptions.InternalError(b,c)):this.onError(new _exceptions.GenericError(b,c))}catch(a){this.onError(a)}}getBufferedAmount(){return _classPrivateFieldGet(_socket,this)?_classPrivateFieldGet(_socket,this).bufferedAmount:0}onConnected(){_index.logger.info("".concat(this.name,": connected")),_classPrivateFieldSet(_connectionStatus,this,ConnectionStatus.CONNECTED),_classPrivateFieldGet(_connectionFuture,this).set("connected")}onDisconnected(){null!=_classPrivateFieldGet(_socket,this)&&(_classPrivateFieldGet(_socket,this).close(),_classPrivateFieldSet(_socket,this,null),_index.logger.info("connection disconnected: ",this.name)),_index.logger.warn("".concat(this.name,": disconnected")),_classPrivateFieldSet(_connectionStatus,this,ConnectionStatus.DISCONNECTED),_classPrivateFieldGet(_connectionFuture,this).reject("disconnected")}isConnected(){return _classPrivateFieldGet(_connectionStatus,this)==ConnectionStatus.CONNECTED}waitForConnection(){return _classPrivateFieldGet(_connectionFuture,this).get()}getConnectionStatus(){return _classPrivateFieldGet(_connectionStatus,this)}onData(){}onError(a){_index.logger.warn("".concat(this.name,": onError: ").concat(a))}}exports.ConnectionBase=ConnectionBase;