"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.SendUserActivationEmail=SendUserActivationEmail,exports.createDomain=createDomain,exports.createOrganizationUser=createOrganizationUser,exports.createUsers=createUsers,exports.deleteDomain=deleteDomain,exports.deleteOrganizationUser=deleteOrganizationUser,exports.deleteSAML=deleteSAML,exports.getDomainList=getDomainList,exports.getOrganizationDetails=getOrganizationDetails,exports.getOrganizationList=getOrganizationList,exports.getOrganizationUserDetails=getOrganizationUserDetails,exports.getSAML=getSAML,exports.getUserList=getUserList,exports.setSAML=setSAML,exports.updateUserType=updateUserType,exports.verifyDomain=verifyDomain,require("core-js/modules/es.promise.js"),require("core-js/modules/es.json.stringify.js");var _config=require("../config.js"),_index=require("../utils/http/index.js"),_auth=require("./auth.js"),_types=require("../types/types.js");const accessLevel=_types.AccessLevel.ADMIN;async function getOrganizationList(){let a={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},b=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations"),a);return b.data.organizations}async function getOrganizationDetails(a){if(!a)throw new Error("organization ID can not be empty");let b={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},c=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(a),b);return c.data}async function getUserList(a,b){let c={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};void 0!==b&&(c["x-jibb-pagination"]=JSON.stringify(b));let d=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(a,"/users"),c);return b=d.headers["x-jibb-pagination"],b=b&&JSON.parse(b),{users:d.data.users,pagination:b}}async function createUsers(a){let{orgId:b,users:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.post("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/users"),{users:c},d)}async function createOrganizationUser(a){let{orgId:b,email:c,userType:d}=a,e={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.post("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/users"),{users:[{email:c,user_type:d}]},e)}async function SendUserActivationEmail(a){let{orgId:b,userIds:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.post("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/activation/email"),{user_ids:c},d)}async function deleteOrganizationUser(a){let{orgId:b,userId:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.delete("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/users/").concat(c),d)}async function updateUserType(a){let{orgId:b,userId:c,userType:d}=a,e={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.patch("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/users/").concat(c),{user_type:d},e)}async function getOrganizationUserDetails(a){let{orgId:b,userId:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},e=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/users/").concat(c),d);return e.data}async function setSAML(a){let{orgId:b,metadata:c,autoAddUsers:d,defaultUserType:e,enabled:f}=a;if(!b)throw new Error("organization ID can not be empty");let g={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},h={organization_id:b,metadata:c||"",auto_add_users:d!==void 0&&d,default_user_type:e===void 0?_types.UserType.UNKNOWN:e,enabled:f||!1};return _index.http.put("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/saml"),h,g)}async function deleteSAML(a){let b={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.delete("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(a,"/saml"),b)}async function getSAML(a){if(!a)throw new Error("organization ID can not be empty");let b={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},c=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(a,"/saml"),b);return c.data}async function getDomainList(a){let b={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},c=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(a,"/domains"),b);return c.data}async function createDomain(a){let{orgId:b,domain:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},e=await _index.http.post("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/domains"),{domain_name:c},d);return e.data}async function deleteDomain(a){let{orgId:b,domainId:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})};return _index.http.delete("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/domains/").concat(c),d)}async function verifyDomain(a){let{orgId:b,domainId:c}=a,d={"Content-Type":"application/json",Accept:"application/json","x-jibb-user-jwt":await(0,_auth.getUserToken)({accessLevel:accessLevel})},e=await _index.http.get("".concat(_config.Config.apiBaseURL,"/v1/admin/organizations/").concat(b,"/domains/").concat(c,"/verify"),d);return e.data}